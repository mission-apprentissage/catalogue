const mapNewModelFormation = (oldModel, pFormateur, pResponsable) => {
  const emptyEtablissement = {
    _id: null,
    computed_type: "À vérifier",
    computed_conventionne: "À vérifier",
    computed_declare_prefecture: "NON",
    computed_info_datadock: "inconnu par datadock",
    published: false,
  };
  const formateur = pFormateur || emptyEtablissement;
  const responsable = pResponsable || emptyEtablissement;

  return {
    etablissement_formateur_id: formateur._id,
    etablissement_formateur_siret: oldModel.siret_formateur,
    etablissement_formateur_siret_intitule: oldModel.intitule_siret_formateur,
    etablissement_formateur_uai: oldModel.uaiEtablissementFormateur || "",
    etablissement_formateur_type: formateur.computed_type,
    etablissement_formateur_conventionne: formateur.computed_conventionne,
    etablissement_formateur_declare_prefecture: formateur.computed_declare_prefecture,
    etablissement_formateur_datadock: formateur.computed_info_datadock,
    etablissement_formateur_rncp_habilite: "",
    etablissement_formateur_published: formateur.published,
    etablissement_responsable_id: responsable._id,
    etablissement_responsable_siret: oldModel.siret_CFA_OFA,
    etablissement_responsable_siret_intitule: oldModel.intitule_siret_cfa_ofa,
    etablissement_responsable_uai: oldModel.uaiEtablissementResponsable || "",
    etablissement_responsable_type: responsable.computed_type,
    etablissement_responsable_conventionne: responsable.computed_conventionne,
    etablissement_responsable_declare_prefecture: responsable.computed_declare_prefecture,
    etablissement_responsable_datadock: responsable.computed_info_datadock,
    etablissement_responsable_rncp_habilite: "",
    etablissement_responsable_published: responsable.published,
    etablissement_reference:
      typeof formateur.equals === "function" && formateur.equals(responsable) ? "responsable" : "",
    etablissement_reference_id:
      typeof formateur.equals === "function" && formateur.equals(responsable) ? formateur._id : null,
    etablissement_reference_type: oldModel.etablissement_responsable_isCfaOrOfa || "",
    etablissement_reference_conventionne: oldModel.etablissement_responsable_organisme_conventionne || "",
    etablissement_reference_declare_prefecture: oldModel.etablissement_responsable_declare_prefecture || "",
    etablissement_reference_datadock: oldModel.etablissement_responsable_info_dataDock || "",
    etablissement_reference_rncp_habilite: "",
    etablissement_reference_published: oldModel.etablissement_published || false,
    siren: oldModel.siren,
    nom_academie: oldModel.nomAcademie,
    num_academie: oldModel.numAcademieInt || -1,
    nom_academie_siege: oldModel.nomAcademie_siege,
    num_academie_siege: oldModel.numAcademie_siegeInt || -1,
    code_postal: oldModel.codePostal,
    code_commune_insee: oldModel.codeCommuneInsee,
    num_departement: oldModel.numDepartement,
    ds_id_dossier: oldModel.ds_idDossier,
    uai_formation: oldModel.uai,
    nom: oldModel.nom,
    intitule: oldModel.intitule,
    diplome: oldModel.diplome,
    niveau: oldModel.niveau,
    educ_nat_code: oldModel.codeEducNat,
    rncp_code: "",
    rncp_eligible_apprentissage: "",
    periode: oldModel.periode, // "[\"Septembre\"]",
    capacite: oldModel.capacite,
    email: oldModel.email,
    parcoursup_reference: oldModel.reference_parcoursup,
    info_bcn_code_en: oldModel.info_BCN_codeEN,
    info_bcn_intitule: oldModel.info_BCN_intitule,
    computed_bcn_code_en: oldModel.computed_BCN_codeEN,
    computed_bcn_intitule: oldModel.computed_BCN_intitule,
    info_bcn_niveau: oldModel.info_BCN_niveau || "",
    info_bcn_diplome: oldModel.info_BCN_diplome || "",
    computed_bcn_niveau: oldModel.computed_BCN_niveau || "",
    computed_bcn_diplome: oldModel.computed_BCN_diplome || "",
    source: oldModel.source,
    commentaires: oldModel.commentaires,
    last_modification: oldModel.modification,
    to_verified: oldModel.toVerified,
    published_old: oldModel.published,
    published: false,
    created_at: oldModel.createdAt || Date.now(),
    last_update_at: oldModel.lastUpdateAt || Date.now(),
  };
};

module.exports = mapNewModelFormation;
